From: Michael Davidsaver <mdavidsaver@gmail.com>
Date: Tue, 19 Jan 2016 10:29:08 -0500
Subject: include target_address in ArvGvDiscoverSocket

Put the address to which discovery will be sent
beside the address from which discovery
will be sent.
---
 src/arvgvinterface.c | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/arvgvinterface.c b/src/arvgvinterface.c
index 90e720c..634fbfa 100644
--- a/src/arvgvinterface.c
+++ b/src/arvgvinterface.c
@@ -47,6 +47,7 @@
 
 typedef struct {
 	GSocketAddress *interface_address;
+	GSocketAddress *target_address;
 	GSocket *socket;
 } ArvGvDiscoverSocket;
 
@@ -73,6 +74,7 @@ static ArvGvDiscoverSocketList *
 arv_gv_discover_socket_list_new (void)
 {
 	ArvGvDiscoverSocketList *socket_list;
+	GInetAddress *broadcast_address;
 	GSList *iter;
 	struct ifaddrs *ifap  = NULL;
 	struct ifaddrs *ifap_iter;
@@ -83,6 +85,8 @@ arv_gv_discover_socket_list_new (void)
 	if (getifaddrs (&ifap) < 0)
 		return socket_list;
 
+	broadcast_address = g_inet_address_new_from_string ("255.255.255.255");
+
 	for (ifap_iter = ifap; ifap_iter != NULL; ifap_iter = ifap_iter->ifa_next) {
 		if ((ifap_iter->ifa_flags & IFF_UP) != 0 &&
 		    (ifap_iter->ifa_flags & IFF_POINTOPOINT) == 0 &&
@@ -103,6 +107,8 @@ arv_gv_discover_socket_list_new (void)
 			discover_socket->interface_address = g_inet_socket_address_new (inet_address, 0);
 			g_object_unref (socket_address);
 
+			discover_socket->target_address = g_inet_socket_address_new (broadcast_address, ARV_GVCP_PORT);
+
 			discover_socket->socket = g_socket_new (G_SOCKET_FAMILY_IPV4,
 								G_SOCKET_TYPE_DATAGRAM,
 								G_SOCKET_PROTOCOL_UDP, NULL);
@@ -113,6 +119,7 @@ arv_gv_discover_socket_list_new (void)
 		}
 	}
 
+	g_object_unref (broadcast_address);
 	freeifaddrs (ifap);
 
 	socket_list->poll_fds = g_new (GPollFD, socket_list->n_sockets);
@@ -138,6 +145,7 @@ arv_gv_discover_socket_list_free (ArvGvDiscoverSocketList *socket_list)
 		ArvGvDiscoverSocket *discover_socket = iter->data;
 
 		g_object_unref (discover_socket->interface_address);
+		g_object_unref (discover_socket->target_address);
 		g_object_unref (discover_socket->socket);
 		g_free (discover_socket);
 	}
@@ -154,25 +162,19 @@ arv_gv_discover_socket_list_free (ArvGvDiscoverSocketList *socket_list)
 static void
 arv_gv_discover_socket_list_send_discover_packet (ArvGvDiscoverSocketList *socket_list)
 {
-	GInetAddress *broadcast_address;
-	GSocketAddress *broadcast_socket_address;
 	ArvGvcpPacket *packet;
 	GSList *iter;
 	size_t size;
 
 	packet = arv_gvcp_packet_new_discovery_cmd (&size);
 
-	broadcast_address = g_inet_address_new_from_string ("255.255.255.255");
-	broadcast_socket_address = g_inet_socket_address_new (broadcast_address, ARV_GVCP_PORT);
-	g_object_unref (broadcast_address);
-
 	for (iter = socket_list->sockets; iter != NULL; iter = iter->next) {
 		ArvGvDiscoverSocket *discover_socket = iter->data;
 		GError *error = NULL;
 
 		arv_gv_discover_socket_set_broadcast (discover_socket, TRUE);
 		g_socket_send_to (discover_socket->socket,
-				  broadcast_socket_address,
+				  discover_socket->target_address,
 				  (const char *) packet, size,
 				  NULL, &error);
 		if (error != NULL) {
@@ -182,8 +184,6 @@ arv_gv_discover_socket_list_send_discover_packet (ArvGvDiscoverSocketList *socke
 		arv_gv_discover_socket_set_broadcast (discover_socket, FALSE);
 	}
 
-	g_object_unref (broadcast_socket_address);
-
 	arv_gvcp_packet_free (packet);
 }
 
