From: Michael Davidsaver <mdavidsaver@gmail.com>
Date: Wed, 22 Mar 2017 12:28:17 -0400
Subject: stream: self-joining stream thread fix

Conflicts:
	tests/fakegv.c
---
 src/arvstream.c | 63 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 62 insertions(+), 1 deletion(-)

diff --git a/src/arvstream.c b/src/arvstream.c
index 6127015..3d915e8 100644
--- a/src/arvstream.c
+++ b/src/arvstream.c
@@ -52,6 +52,11 @@ static GObjectClass *parent_class = NULL;
 struct _ArvStreamPrivate {
 	GAsyncQueue *input_queue;
 	GAsyncQueue *output_queue;
+#if GLIB_CHECK_VERSION(2,32,0)
+	GRecMutex mutex;
+#else
+	GRecMutex *mutex;
+#endif
 
 	gboolean emit_signals;
 };
@@ -183,8 +188,20 @@ arv_stream_push_output_buffer (ArvStream *stream, ArvBuffer *buffer)
 
 	g_async_queue_push (stream->priv->output_queue, buffer);
 
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_lock (&stream->priv->mutex);
+#else
+	g_rec_mutex_lock (stream->priv->mutex);
+#endif
+
 	if (stream->priv->emit_signals)
 		g_signal_emit (stream, arv_stream_signals[ARV_STREAM_SIGNAL_NEW_BUFFER], 0);
+
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_unlock (&stream->priv->mutex);
+#else
+	g_rec_mutex_unlock (stream->priv->mutex);
+#endif
 }
 
 /**
@@ -271,7 +288,19 @@ arv_stream_set_emit_signals (ArvStream *stream, gboolean emit_signals)
 {
 	g_return_if_fail (ARV_IS_STREAM (stream));
 
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_lock (&stream->priv->mutex);
+#else
+	g_rec_mutex_lock (stream->priv->mutex);
+#endif
+
 	stream->priv->emit_signals = emit_signals;
+
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_unlock (&stream->priv->mutex);
+#else
+	g_rec_mutex_unlock (stream->priv->mutex);
+#endif
 }
 
 /**
@@ -288,9 +317,24 @@ arv_stream_set_emit_signals (ArvStream *stream, gboolean emit_signals)
 gboolean
 arv_stream_get_emit_signals (ArvStream *stream)
 {
+	gboolean ret;
 	g_return_val_if_fail (ARV_IS_STREAM (stream), FALSE);
 
-	return stream->priv->emit_signals;
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_lock (&stream->priv->mutex);
+#else
+	g_rec_mutex_lock (stream->priv->mutex);
+#endif
+
+	ret = stream->priv->emit_signals;
+
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_unlock (&stream->priv->mutex);
+#else
+	g_rec_mutex_unlock (stream->priv->mutex);
+#endif
+
+	return ret;
 }
 
 static void
@@ -334,6 +378,12 @@ arv_stream_init (ArvStream *stream)
 	stream->priv->output_queue = g_async_queue_new ();
 
 	stream->priv->emit_signals = FALSE;
+
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_init (&stream->priv->mutex);
+#else
+	stream->priv->mutex = g_rec_mutex_new ();
+#endif
 }
 
 static void
@@ -347,6 +397,11 @@ arv_stream_finalize (GObject *object)
 	arv_debug_stream ("[Stream::finalize] Flush %d buffer[s] in output queue",
 			  g_async_queue_length (stream->priv->output_queue));
 
+	if (stream->priv->emit_signals) {
+		g_warning ("Stream finalized with 'new-buffer' signal enabled");
+		g_warning ("Please call arv_stream_set_emit_signals (stream, FALSE) before ArvStream object finalization");
+	}
+
 	do {
 		buffer = g_async_queue_try_pop (stream->priv->output_queue);
 		if (buffer != NULL)
@@ -362,6 +417,12 @@ arv_stream_finalize (GObject *object)
 	g_async_queue_unref (stream->priv->input_queue);
 	g_async_queue_unref (stream->priv->output_queue);
 
+#if GLIB_CHECK_VERSION(2,32,0)
+	g_rec_mutex_clear (&stream->priv->mutex);
+#else
+	g_rec_mutex_free (stream->priv->mutex);
+#endif
+
 	parent_class->finalize (object);
 }
 
